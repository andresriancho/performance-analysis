import os
import logging
import json
import humanize

from wpamod.plugins.base.analysis_plugin import AnalysisPlugin, SPEED_VERY_FAST


class SystemInformation(AnalysisPlugin):
    """
    Read the information generated by
    https://github.com/andresriancho/collector/blob/master/examples/w3af/get_sys_perf_data.py

    Which is stored in w3af-psutil.data
    """
    SPEED = SPEED_VERY_FAST

    def analyze(self, humanize_bytes=True):
        psutil_file = os.path.join(self.input_directory, 'w3af-psutil.data')
        logging.debug('Analyzing "%s" psutil dump' % psutil_file)

        try:
            psutil_data = json.load(file(psutil_file))
        except IOError:
            logging.error('File not found: "%s"' % psutil_file)
            return []

        data = self.format_data(psutil_data, humanize_bytes=humanize_bytes)
        return data

    def format_data(self, psutil_data, humanize_bytes=True):
        data = []

        #
        # Load average
        #
        load = ' '.join(str(l) for l in psutil_data['Load average'])
        data.append(('Load average', load))

        #
        # Network
        #
        bytes_recv = psutil_data['Network']['eth0']['bytes_recv']
        bytes_sent = psutil_data['Network']['eth0']['bytes_sent']

        if humanize_bytes:
            bytes_recv = humanize.naturalsize(bytes_recv, gnu=True)
            bytes_sent = humanize.naturalsize(bytes_sent, gnu=True)
        else:
            bytes_recv = bytes_recv / 1024 / 1024
            bytes_sent = bytes_sent / 1024 / 1024

        data.append(('Network',
                     (('Bytes sent', bytes_sent),
                      ('Bytes received', bytes_recv))))

        #
        # Swap memory
        #
        swap_perc = psutil_data['Swap memory']['percent']
        sin = psutil_data['Swap memory']['sin']
        sout = psutil_data['Swap memory']['sout']

        swap = (('% used (best: 0.0)', swap_perc),
                ('Pages per second (out) (best: 0)', sin),
                ('Pages per second (in)  (best: 0)', sout),)
        data.append(('Swap memory', swap))
        return data

    def generate_graph_data(self):
        """
        :return: The data to use in the HTML graph
        """
        raw_data = self.analyze(humanize_bytes=False)
        graph_data = {}

        for measurement in raw_data:
            if measurement[0] == 'Network':
                graph_data['Network'] = [measurement[1][0][1],
                                         measurement[1][1][1]]

        return graph_data

    def get_output_name(self):
        return 'Operating System information'
